/*! For license information please see 6ace9a37.c553fd29.js.LICENSE.txt */
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6252],{44055:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var s=t(74848),i=t(28453),a=t(28775);const r={title:"Design a GraphQL Schema So Good, It'll Make REST APIs Cry - Part 2",authors:[{name:"Amit Singh",title:"Head of Growth and Strategy @ Tailcall",url:"https://github.com/amitksingh1490",image_url:"https://avatars.githubusercontent.com/u/23661702?v=5"}],tags:["GraphQL","API","Schema","Design","Best Practices"],description:"Learn how to make additive changes to your GraphQL schema without causing disruptions.",image:"/images/graphql/graphql-schema-structure.png",hide_table_of_contents:!0,slug:"graphql-schema-part-2-1"},o=void 0,l={permalink:"/blog/graphql-schema-part-2-1",source:"@site/blog/graphql-schema-part-2-1-2024-07-21.mdx",title:"Design a GraphQL Schema So Good, It'll Make REST APIs Cry - Part 2",description:"Learn how to make additive changes to your GraphQL schema without causing disruptions.",date:"2024-07-21T00:00:00.000Z",tags:[{inline:!0,label:"GraphQL",permalink:"/blog/tags/graph-ql"},{inline:!0,label:"API",permalink:"/blog/tags/api"},{inline:!0,label:"Schema",permalink:"/blog/tags/schema"},{inline:!0,label:"Design",permalink:"/blog/tags/design"},{inline:!0,label:"Best Practices",permalink:"/blog/tags/best-practices"}],readingTime:8.15,hasTruncateMarker:!0,authors:[{name:"Amit Singh",title:"Head of Growth and Strategy @ Tailcall",url:"https://github.com/amitksingh1490",image_url:"https://avatars.githubusercontent.com/u/23661702?v=5",imageURL:"https://avatars.githubusercontent.com/u/23661702?v=5"}],frontMatter:{title:"Design a GraphQL Schema So Good, It'll Make REST APIs Cry - Part 2",authors:[{name:"Amit Singh",title:"Head of Growth and Strategy @ Tailcall",url:"https://github.com/amitksingh1490",image_url:"https://avatars.githubusercontent.com/u/23661702?v=5",imageURL:"https://avatars.githubusercontent.com/u/23661702?v=5"}],tags:["GraphQL","API","Schema","Design","Best Practices"],description:"Learn how to make additive changes to your GraphQL schema without causing disruptions.",image:"/images/graphql/graphql-schema-structure.png",hide_table_of_contents:!0,slug:"graphql-schema-part-2-1"},unlisted:!1,prevItem:{title:"Design a GraphQL Schema So Good, It'll Make REST APIs Cry - Part 3",permalink:"/blog/graphql-schema-part-2-2"},nextItem:{title:"Apollo vs Urql vs Fetch: The Ultimate Showdown",permalink:"/blog/graphql-angular-client"}},c={authorsImageUrls:[void 0]},d=[{value:"What Do You Already Know? \ud83e\udde0\ud83d\udcab",id:"what-do-you-already-know-",level:2},{value:"Adding Without Breaking: The Art of Additive Changes",id:"adding-without-breaking-the-art-of-additive-changes",level:2},{value:"The Good, The Bad, and The Ugly of Schema Changes",id:"the-good-the-bad-and-the-ugly-of-schema-changes",level:2},{value:"Additive Changes",id:"additive-changes",level:2},{value:"The Optional Argument Conundrum",id:"the-optional-argument-conundrum",level:3},{value:"The Required Argument Trap",id:"the-required-argument-trap",level:3},{value:"The Interface and Union Twist",id:"the-interface-and-union-twist",level:3},{value:"Adding New Interface Implementations",id:"adding-new-interface-implementations",level:3},{value:"The Union Expansion Conundrum",id:"the-union-expansion-conundrum",level:3},{value:"The Enum Evolution",id:"the-enum-evolution",level:3},{value:"Conclusion",id:"conclusion",level:2}];function h(e){const n={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h2,{id:"what-do-you-already-know-",children:"What Do You Already Know? \ud83e\udde0\ud83d\udcab"}),"\n",(0,s.jsx)(a.A,{title:"GraphQL Schema Change",questions:[{id:1,text:"Adding a new field to a GraphQL schema is generally a:",options:["Safe change","Dangerous change","Breaking change","Requires deprecation"],correctAnswer:0},{id:2,text:"What is a potential issue when adding a new optional argument to a resolver?",options:["It requires clients to update their queries","It can change the default behavior if not handled properly","It always breaks existing queries","It is not allowed in GraphQL"],correctAnswer:1},{id:3,text:"Which strategy can make adding a required argument safe?",options:["Introducing a new field","Providing a default value","Deprecating the old argument","Using introspection queries"],correctAnswer:1},{id:4,text:"What is a common risk when adding a new type to an existing interface?",options:["Clients will receive runtime errors if not properly type-checked","The schema becomes invalid","Existing types get overridden","It forces all clients to update immediately"],correctAnswer:0},{id:5,text:"What should clients implement to handle new union members?",options:["Fallback UI components for unknown types","Always use non-null fields","Deprecation notices","Schema descriptions"],correctAnswer:0}]}),"\n",(0,s.jsxs)(n.p,{children:["In our ",(0,s.jsx)(n.a,{href:"/blog/graphql-schema",children:"previous post"}),", we learned scalable GraphQL schema is critical for building production-ready APIs that can evolve with your application's needs."]}),"\n",(0,s.jsxs)(n.p,{children:["In this post, we will dive deeper into how to ",(0,s.jsx)(n.strong,{children:"continuously"})," evolve your schema to meet your application's changing requirements without hard-coded versioning."]}),"\n",(0,s.jsx)(n.h2,{id:"adding-without-breaking-the-art-of-additive-changes",children:"Adding Without Breaking: The Art of Additive Changes"}),"\n",(0,s.jsx)(n.p,{children:"You know that feeling when you're working on a project, and suddenly you realize your schema needs to change? Maybe you need to add a new field, modify an existing one, or even remove something entirely. It's enough to make any developer break out in a cold sweat, right?"}),"\n",(0,s.jsxs)(n.p,{children:["But fear not! I'm here to show you ",(0,s.jsx)(n.strong,{children:"how to evolve your schema like a pro"}),", keeping your API fresh and exciting without causing your clients to tear their hair out."]}),"\n",(0,s.jsx)(n.h2,{id:"the-good-the-bad-and-the-ugly-of-schema-changes",children:"The Good, The Bad, and The Ugly of Schema Changes"}),"\n",(0,s.jsx)(n.p,{children:"Not all changes are created equal. In this section, we\u2019ll analyze a few different types of changes and what makes them safe or unsafe."}),"\n",(0,s.jsx)(n.p,{children:"First things first, let's break down the types of changes we might make to our schema:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Safe Changes:"})," These are the golden children of schema evolution. You can make these changes anytime, and your clients won't even bat an eyelash."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Dangerous Changes:"})," These are the sneaky ones. They might not break anything outright, but they can cause subtle issues that'll have your clients scratching their heads. We'll need to proceed carefully here."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Breaking Changes:"})," The name says it all. These changes will send your clients' applications crashing down faster than you can say \"",(0,s.jsx)(n.strong,{children:"GraphQL"}),"\". We want to avoid these like the plague, but sometimes they're necessary. Don't worry, I'll show you how to handle them like a pro."]}),"\n"]}),"\n",(0,s.jsx)(n.h2,{id:"additive-changes",children:"Additive Changes"}),"\n",(0,s.jsx)(n.p,{children:"Most of the time, these are safe as houses."}),"\n",(0,s.jsx)(n.p,{children:"For example, adding fields & adding types is unlikely to cause issues for clients. But, there are a few tricky scenarios to watch out for."}),"\n",(0,s.jsx)(n.h3,{id:"the-optional-argument-conundrum",children:"The Optional Argument Conundrum"}),"\n",(0,s.jsx)(n.p,{children:"Adding optional arguments is generally safe - it's like offering your clients a shiny new toy without forcing them to play with it."}),"\n",(0,s.jsx)(n.p,{children:"However, there's a catch. Check this out:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"  type Query {\n-   products(category: String): [Product!]!\n+   products(category: String, inStock: Boolean): [Product!]!\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See what we did there? We added an optional ",(0,s.jsx)(n.code,{children:"inStock"})," argument. Seems harmless, right?"]}),"\n",(0,s.jsx)(n.p,{children:"Let's dive deeper into why changing the behavior of a resolver when an optional argument isn't provided can be problematic:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"type Query {\n  products(category: String, inStock: Boolean): [Product!]!\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Imagine you have clients that have been using this query:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query {\n  products(category: "Electronics") {\n    name\n    price\n  }\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["If your resolver suddenly starts filtering out out-of-stock products when ",(0,s.jsx)(n.code,{children:"inStock"})," isn't provided, these clients will unexpectedly receive fewer results. This could break their UI or data processing logic."]}),"\n",(0,s.jsxs)(n.p,{children:["To avoid this issue, you can implement a strategy to handle the absence of the ",(0,s.jsx)(n.code,{children:"inStock"})," argument gracefully in your resolver, so that the behavior remains consistent for clients."]}),"\n",(0,s.jsx)(n.h3,{id:"the-required-argument-trap",children:"The Required Argument Trap"}),"\n",(0,s.jsx)(n.p,{children:"Now, this is where things get spicy \ud83c\udf36\ufe0f."}),"\n",(0,s.jsxs)(n.p,{children:["Adding a required argument is almost always a ",(0,s.jsx)(n.strong,{children:"breaking change"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"But, fear not! There's a way out:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"  type Query {\n-   products(category: String): [Product!]!\n+   products(category: String, sortBy: SortOption!): [Product!]!\n  }\n"})}),"\n",(0,s.jsxs)(n.p,{children:["This change is ",(0,s.jsx)(n.strong,{children:"breaking"}),", but it doesn't have to be."]}),"\n",(0,s.jsxs)(n.p,{children:["You can provide a ",(0,s.jsx)(n.strong,{children:"default value"})," for the new argument to keep your existing clients happy."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"type Query {\n-    products(category: String): [Product!]!\n+    products(category: String, sortBy: SortOption! = POPULARITY): [Product!]!\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["See that ",(0,s.jsx)(n.code,{children:"= POPULARITY"}),"? That's your get-out-of-jail-free card. By providing a default value, you've made this addition safe."]}),"\n",(0,s.jsx)(n.p,{children:"Existing clients will use the default, and new clients can take advantage of the sorting option."}),"\n",(0,s.jsx)(n.h3,{id:"the-interface-and-union-twist",children:"The Interface and Union Twist"}),"\n",(0,s.jsx)(n.p,{children:"Now, let's talk about some trickier additive changes that can catch you off guard if you're not careful."}),"\n",(0,s.jsx)(n.h3,{id:"adding-new-interface-implementations",children:"Adding New Interface Implementations"}),"\n",(0,s.jsx)(n.p,{children:"Adding a new type that implements an existing interface might seem harmless, but it can cause some unexpected behavior. Check this out:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:"interface Node {\n  id: ID!\n}\n\ntype User implements Node {\n  id: ID!\n  name: String!\n}\n\ntype Team implements Node {\n  id: ID!\n  name: String!\n}\n\n# highlight-start\ntype Organization implements Node {\n  id: ID!\n  name: String!\n  employees: [User!]!\n}\n# highlight-end\n"})}),"\n",(0,s.jsxs)(n.p,{children:["By adding the ",(0,s.jsx)(n.code,{children:"Organization"})," type, we've expanded what could be returned by queries selecting for ",(0,s.jsx)(n.code,{children:"Node"}),". This could break clients that aren't prepared to handle new types. Always encourage clients to use proper type checking."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query {\n  node(id: "1") {\n    ... on User {\n      name\n    }\n    ... on Team {\n      name\n    }\n    ... on Organization {\n      name\n      employees {\n        name\n      }\n    }\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"Without proper type checking, clients might encounter these issues:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime Errors:"})," If a client assumes all Node types have only a name field, they might try to access ",(0,s.jsx)(n.code,{children:"employees"})," on a ",(0,s.jsx)(n.code,{children:"User"})," or ",(0,s.jsx)(n.code,{children:"Team"}),", causing errors."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Missing Data:"})," Clients might not display Organization-specific data if they're not prepared to handle it."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Incorrect Data Processing:"})," Business logic that assumes only ",(0,s.jsx)(n.code,{children:"User"})," and ",(0,s.jsx)(n.code,{children:"Team"})," types exist might produce incorrect results."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To mitigate these issues:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Use TypeScript or Flow on the client-side to catch type errors at compile-time."}),"\n",(0,s.jsx)(n.li,{children:"Implement exhaustive type checking in your client code:"}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'function handleNode(node: Node) {\n  switch (node.__typename) {\n    case "User":\n      return handleUser(node)\n    case "Team":\n      return handleTeam(node)\n    case "Organization":\n      return handleOrganization(node)\n    default:\n      const _exhaustiveCheck: never = node\n      throw new Error(`Unhandled node type: ${(_exhaustiveCheck as any).__typename}`)\n  }\n}\n'})}),"\n",(0,s.jsx)(n.p,{children:"This approach ensures that if a new type is added in the future, TypeScript will raise a compile-time error, prompting developers to update their code."}),"\n",(0,s.jsx)(n.h3,{id:"the-union-expansion-conundrum",children:"The Union Expansion Conundrum"}),"\n",(0,s.jsx)(n.p,{children:"Similar to interfaces, adding new members to a union can cause runtime surprises. Consider this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"-  union SearchResult = User | Post\n+  union SearchResult = User | Post | Comment\n"})}),"\n",(0,s.jsx)(n.p,{children:"Surprise! Your clients might suddenly receive a type they weren't expecting. It's like opening a box of chocolates and finding a pickle - not necessarily bad, but definitely unexpected. Make sure to document how clients should handle these surprise types."}),"\n",(0,s.jsx)(n.p,{children:"Let's delve into why union expansions can be tricky and how to handle them gracefully:"}),"\n",(0,s.jsxs)(n.p,{children:["When you add ",(0,s.jsx)(n.code,{children:"Comment"})," to the ",(0,s.jsx)(n.code,{children:"SearchResult"})," union, existing clients might break in subtle ways:"]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Incomplete UI:"})," If the client only has UI components for ",(0,s.jsx)(n.code,{children:"User"})," and ",(0,s.jsx)(n.code,{children:"Post"}),", ",(0,s.jsx)(n.code,{children:"Comment"})," results won't be displayed."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Runtime Errors:"})," Code that assumes only ",(0,s.jsx)(n.code,{children:"User"})," and ",(0,s.jsx)(n.code,{children:"Post"})," types exist might throw errors when encountering a ",(0,s.jsx)(n.code,{children:"Comment"}),"."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"To handle this gracefully:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Implement a fallback UI component for unknown types:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-tsx",children:'function SearchResultItem({result}) {\n  switch (result.__typename) {\n    case "User":\n      return <UserResult user={result} />\n    case "Post":\n      return <PostResult post={result} />\n    case "Comment":\n      return <CommentResult comment={result} />\n    default:\n      return <UnknownResultType type={result.__typename} />\n  }\n}\n'})}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Encourage clients to use introspection queries to stay updated on schema changes:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-graphql",children:'query {\n  __type(name: "SearchResult") {\n    kinds\n    possibleTypes {\n      name\n    }\n  }\n}\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By implementing these strategies, clients can gracefully handle new union members without breaking existing functionality."}),"\n",(0,s.jsx)(n.h3,{id:"the-enum-evolution",children:"The Enum Evolution"}),"\n",(0,s.jsx)(n.p,{children:"Adding new enum values seems innocent enough, but it can impact client-side logic. Let's look at an example:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-diff",children:"  enum OrderStatus {\n   PENDING\n   COMPLETED\n+  CANCELED\n+  REFUNDED\n}\n"})}),"\n",(0,s.jsx)(n.p,{children:"Clients that were using exhaustive switches might now have incomplete logic. Encourage clients to use default cases to handle new enum values."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-typescript",children:'switch (order.status) {\n  case "PENDING":\n    return "Order is pending"\n  case "COMPLETED":\n    return "Order is completed"\n  default:\n    return "Order status unknown"\n}\n'})}),"\n",(0,s.jsx)(n.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Evolving a GraphQL schema through additive changes allows you to expand your API's capabilities while maintaining backward compatibility. By following the principles and strategies outlined in this article, you can confidently add new fields, types, and arguments without causing disruptions to your clients."}),"\n",(0,s.jsx)(n.p,{children:"Remember these key takeaways:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Favor Additive Changes"}),": Whenever possible, add new fields, types, or arguments instead of modifying existing ones. This approach maintains backward compatibility while allowing your schema to grow."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.strong,{children:"Provide Transition Paths"}),": Introduce new features alongside existing ones to allow gradual client adoption."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"By treating your GraphQL schema as a product with its own lifecycle and evolution strategy, you can build APIs that are both powerful and adaptable. This approach allows you to innovate rapidly while providing a stable and reliable service to your clients."}),"\n",(0,s.jsxs)(n.p,{children:["Stay tuned for the ",(0,s.jsx)(n.a,{href:"/blog/graphql-schema-part-2-2",children:"next part"})," of this series, where we will dive into removing schema elements and handling breaking changes!"]})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28775:(e,n,t)=>{t.d(n,{A:()=>h});var s=t(96540),i=t(84722);const a=(0,i.A)("Frown",[["circle",{cx:"12",cy:"12",r:"10",key:"1mglay"}],["path",{d:"M16 16s-1.5-2-4-2-4 2-4 2",key:"epbg0q"}],["line",{x1:"9",x2:"9.01",y1:"9",y2:"9",key:"yxxnd0"}],["line",{x1:"15",x2:"15.01",y1:"9",y2:"9",key:"1p4y9e"}]]),r=(0,i.A)("Check",[["path",{d:"M20 6 9 17l-5-5",key:"1gmf2c"}]]),o=(0,i.A)("X",[["path",{d:"M18 6 6 18",key:"1bl5f8"}],["path",{d:"m6 6 12 12",key:"d8bk6v"}]]);var l=t(22375),c=t(74848);const d=()=>(0,c.jsx)("svg",{className:"w-5 h-5 inline-block mr-2",viewBox:"0 0 24 24",fill:"currentColor",children:(0,c.jsx)("path",{d:"M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"})}),h=e=>{let{questions:n,title:t}=e;const[i,h]=(0,s.useState)(0),[u,g]=(0,s.useState)(0),[p,m]=(0,s.useState)(!1),[x,y]=(0,s.useState)(null);return(0,c.jsxs)("div",{className:"max-w-2xl mx-auto p-6 bg-gradient-to-r from-purple-100 to-blue-100 shadow-lg rounded-xl",children:[(0,c.jsxs)("h2",{className:"text-3xl font-bold mb-6 text-center text-gray-800",children:[t," Quiz!"]}),p?(0,c.jsxs)("div",{className:"text-center",children:[(0,c.jsxs)("p",{className:"text-2xl mb-4 font-semibold text-gray-700",children:["You scored ",u," out of ",n.length]}),u>3?(0,c.jsxs)("div",{className:"flex flex-col items-center",children:[(0,c.jsx)("p",{className:"text-5xl mb-4",children:"\ud83c\udf89"}),(0,c.jsx)("p",{className:"text-green-600 font-bold text-xl",children:"Congratulations! You're a GraphQL schema change expert!"})]}):(0,c.jsxs)("div",{className:"flex flex-col items-center",children:[(0,c.jsx)(a,{size:64,className:"text-red-500 mb-4"}),(0,c.jsx)("p",{className:"text-red-600 font-bold text-xl",children:"Keep learning about schema changes. You'll get there!"})]}),(0,c.jsx)("div",{className:"mt-6 space-y-3",children:(0,c.jsxs)("button",{onClick:()=>((e,n,t,s)=>{(0,l.p8)(s,"score","score shared");const i=`I scored ${n} out of ${t} on the ${s} Quiz! Test your knowledge too!`,a=document.location.href;let r="";"twitter"===e&&(r=`https://twitter.com/intent/tweet?text=${encodeURIComponent(i)}&url=${encodeURIComponent(a)}&via=tailcallhq`),window.open(r,"_blank")})("twitter",u,n.length,t),className:"w-full bg-black text-white px-6 py-3 rounded-full text-lg font-semibold hover:bg-gray-800 transition-colors duration-300 shadow-md flex items-center justify-center",children:[(0,c.jsx)(d,{})," Share on X (Twitter)"]})}),(0,c.jsx)("button",{onClick:()=>{(0,l.p8)(t,"Click","reset Clicked"),h(0),g(0),m(!1),y(null)},className:"mt-6 bg-green-500 text-white px-6 py-3 rounded-full text-lg font-semibold hover:bg-green-600 transition-colors duration-300 shadow-md w-full",children:"Retry Quiz"})]}):(0,c.jsxs)("div",{children:[(0,c.jsxs)("p",{className:"mb-4 text-lg font-semibold text-gray-600",children:["Question ",i+1,"/",n.length]}),(0,c.jsx)("p",{className:"text-xl font-bold mb-6 text-gray-800",children:n[i].text}),(0,c.jsx)("div",{className:"space-y-3",children:n[i].options.map(((e,s)=>(0,c.jsxs)("button",{onClick:()=>{return e=s,(0,l.p8)(t,"Click","Answer Clicked"),y(e),e===n[i].correctAnswer&&g(u+1),void setTimeout((()=>{y(null);const e=i+1;e<n.length?h(e):m(!0)}),1e3);var e},className:"w-full text-left p-4 rounded-lg transition-all duration-300 "+(null===x?"bg-white hover:bg-gray-100 shadow-md":x===s?s===n[i].correctAnswer?"bg-green-500 text-white":"bg-red-500 text-white":"bg-white"),disabled:null!==x,children:[(0,c.jsx)("span",{className:"text-lg font-medium",children:e}),x===s&&(0,c.jsx)("span",{className:"float-right",children:s===n[i].correctAnswer?(0,c.jsx)(r,{className:"inline text-white",size:24}):(0,c.jsx)(o,{className:"inline text-white",size:24})})]},s)))})]})]})}},84722:(e,n,t)=>{t.d(n,{A:()=>o});var s=t(96540);const i=(...e)=>e.filter(((e,n,t)=>Boolean(e)&&t.indexOf(e)===n)).join(" ");var a={xmlns:"http://www.w3.org/2000/svg",width:24,height:24,viewBox:"0 0 24 24",fill:"none",stroke:"currentColor",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"};const r=(0,s.forwardRef)((({color:e="currentColor",size:n=24,strokeWidth:t=2,absoluteStrokeWidth:r,className:o="",children:l,iconNode:c,...d},h)=>(0,s.createElement)("svg",{ref:h,...a,width:n,height:n,stroke:e,strokeWidth:r?24*Number(t)/Number(n):t,className:i("lucide",o),...d},[...c.map((([e,n])=>(0,s.createElement)(e,n))),...Array.isArray(l)?l:[l]]))),o=(e,n)=>{const t=(0,s.forwardRef)((({className:t,...a},o)=>{return(0,s.createElement)(r,{ref:o,iconNode:n,className:i(`lucide-${l=e,l.replace(/([a-z0-9])([A-Z])/g,"$1-$2").toLowerCase()}`,t),...a});var l}));return t.displayName=`${e}`,t}},28453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>o});var s=t(96540);const i={},a=s.createContext(i);function r(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);