"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9183],{27679:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>d});var t=n(74848),r=n(28453);const s={title:"Unlocking the Power of GraphQL Directives: A Comprehensive Guide",description:"Learn about GraphQL directives, their types, and how to use them to modify query execution.",sidebar_label:"Directives",slug:"graphql-directives"},a=void 0,l={id:"directives",title:"Unlocking the Power of GraphQL Directives: A Comprehensive Guide",description:"Learn about GraphQL directives, their types, and how to use them to modify query execution.",source:"@site/graphql/directives.md",sourceDirName:".",slug:"/graphql-directives",permalink:"/graphql/graphql-directives",draft:!1,unlisted:!1,tags:[],version:"current",lastUpdatedAt:172042647e4,frontMatter:{title:"Unlocking the Power of GraphQL Directives: A Comprehensive Guide",description:"Learn about GraphQL directives, their types, and how to use them to modify query execution.",sidebar_label:"Directives",slug:"graphql-directives"},sidebar:"graphql",previous:{title:"Introspection",permalink:"/graphql/graphql-introspection"},next:{title:"Frequently Asked Questions",permalink:"/graphql/faq"}},c={},d=[{value:"Introduction to GraphQL Directives",id:"introduction-to-graphql-directives",level:2},{value:"What Are GraphQL Directives?",id:"what-are-graphql-directives",level:2},{value:"Built-in GraphQL Directives",id:"built-in-graphql-directives",level:3},{value:"Custom GraphQL Directives",id:"custom-graphql-directives",level:3},{value:"Directive Locations in GraphQL",id:"directive-locations-in-graphql",level:3},{value:"Type System Directives",id:"type-system-directives",level:3},{value:"Example of <code>@http</code> Directive",id:"example-of-http-directive",level:3},{value:"Execution Directives",id:"execution-directives",level:3},{value:"Example of @include Directive",id:"example-of-include-directive",level:3},{value:"Conclusion and Next Steps",id:"conclusion-and-next-steps",level:2}];function o(e){const i={a:"a",code:"code",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(i.h2,{id:"introduction-to-graphql-directives",children:"Introduction to GraphQL Directives"}),"\n",(0,t.jsxs)(i.p,{children:["GraphQL directives are a vital component of the GraphQL specification. These powerful tools may be less familiar due to their limited mandatory usage in API compliance. However, their ability to extend the functionality of a GraphQL API and server is crucial, especially in advanced tools like ",(0,t.jsx)(i.a,{href:"/docs/tailcall-dsl-graphql-custom-directives",children:"Tailcall"})," Graph Server."]}),"\n",(0,t.jsx)(i.p,{children:"This article will explore the nature of GraphQL directives, their applications, and provide examples of their usage."}),"\n",(0,t.jsx)(i.h2,{id:"what-are-graphql-directives",children:"What Are GraphQL Directives?"}),"\n",(0,t.jsx)(i.p,{children:"GraphQL directives serve as annotations within a GraphQL schema, indicating that the annotated element requires special evaluation. They enable modifications in runtime execution and type validation within a GraphQL document."}),"\n",(0,t.jsx)(i.p,{children:"Directives allow the alteration of GraphQL execution behavior by providing options beyond those available through field arguments. For example, directives can conditionally include or exclude fields."}),"\n",(0,t.jsx)(i.p,{children:"Both built-in and custom directives can be utilized when building or consuming a GraphQL API. Built-in directives are defined by the GraphQL specification, while custom directives are created by the GraphQL service or tool being used."}),"\n",(0,t.jsx)(i.h3,{id:"built-in-graphql-directives",children:"Built-in GraphQL Directives"}),"\n",(0,t.jsx)(i.p,{children:"The GraphQL specification includes several built-in directives with specific names and argument values of any input type. These directives can be applied to types, fields, fragments, and operations. Here are the built-in directives:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"@skip"}),": Conditionally excludes fields from a query operation."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"@include"}),": Conditionally includes fields in a query operation, opposite of @skip."]}),"\n",(0,t.jsxs)(i.li,{children:[(0,t.jsx)(i.strong,{children:"@deprecated"}),": Marks a field or enum value as deprecated and provides a reason for deprecation."]}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"As GraphQL evolves, new directives like @defer and @stream may be introduced by the GraphQL Working Group. Additionally, GraphQL services and tools can provide custom directives."}),"\n",(0,t.jsx)(i.h3,{id:"custom-graphql-directives",children:"Custom GraphQL Directives"}),"\n",(0,t.jsx)(i.p,{children:"Custom directives enhance GraphQL's functionality, allowing the addition of bespoke behaviors to a GraphQL API. Various GraphQL server and client implementations use custom directives to extend functionality."}),"\n",(0,t.jsxs)(i.p,{children:["For instance, Tailcall uses custom directives like ",(0,t.jsx)(i.code,{children:"@http"}),", ",(0,t.jsx)(i.code,{children:"@grpc"})," and, ",(0,t.jsx)(i.code,{children:"@graphql"})," to connect with data sources. These directives enable interfacing with REST APIs, gRPC APIs, and other GraphQL APIs. Directives like ",(0,t.jsx)(i.code,{children:"@call"})," help combine data from multiple sources into a single type."]}),"\n",(0,t.jsx)(i.h3,{id:"directive-locations-in-graphql",children:"Directive Locations in GraphQL"}),"\n",(0,t.jsx)(i.p,{children:"Directives can be applied to different locations within GraphQL. The GraphQL specification differentiates between type system directive locations and executable directive locations. The location determines how a GraphQL implementation handles them."}),"\n",(0,t.jsxs)(i.p,{children:["For example, ",(0,t.jsx)(i.code,{children:"@include"})," and ",(0,t.jsx)(i.code,{children:"@skip"})," can be used in queries passed to the GraphQL server, affecting query processing based on an argument. Conversely, @deprecated is only added to a schema definition."]}),"\n",(0,t.jsx)(i.h3,{id:"type-system-directives",children:"Type System Directives"}),"\n",(0,t.jsx)(i.p,{children:"Type system directives annotate a schema, object type, or field definition in GraphQL SDL (Schema Definition Language) when building a GraphQL server. Both built-in and custom directives can be used in type system directive locations, allowing GraphQL server implementations to take additional actions."}),"\n",(0,t.jsx)(i.p,{children:'Type system directive locations, also known as "schema directives," include:'}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"SCHEMA"}),"\n",(0,t.jsx)(i.li,{children:"SCALAR"}),"\n",(0,t.jsx)(i.li,{children:"OBJECT"}),"\n",(0,t.jsx)(i.li,{children:"FIELD_DEFINITION"}),"\n",(0,t.jsx)(i.li,{children:"ARGUMENT_DEFINITION"}),"\n",(0,t.jsx)(i.li,{children:"INTERFACE"}),"\n",(0,t.jsx)(i.li,{children:"UNION"}),"\n",(0,t.jsx)(i.li,{children:"ENUM & ENUM_VALUE"}),"\n",(0,t.jsx)(i.li,{children:"INPUT_OBJECT & INPUT_FIELD_DEFINITION"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"For example, the @deprecated directive marks a field as deprecated:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-graphql",children:'type User {\n  id: ID!\n  name: String!\n    @deprecated(\n      reason: "Use the firstName and lastName fields instead"\n    )\n  firstName: String!\n  lastName: String!\n  email: String!\n}\n'})}),"\n",(0,t.jsx)(i.p,{children:"The @deprecated directive provides a reason for deprecation, which is available to services that introspect the schema. Clients can then warn users about the deprecated field."}),"\n",(0,t.jsxs)(i.h3,{id:"example-of-http-directive",children:["Example of ",(0,t.jsx)(i.code,{children:"@http"})," Directive"]}),"\n",(0,t.jsxs)(i.p,{children:["The ",(0,t.jsx)(i.code,{children:"@http"})," directive, a custom directive in Tailcall Graph Server, fetches data for the User type from a REST API:"]}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-graphql",children:'type User {\n  id: ID!\n  name: String!\n  email: String!\n}\n\ntype Query {\n  user(id: ID!): User\n    @http(\n      baseURL: "https://jsonplaceholder.typicode.com"\n      path: "/users/{{.args.id)}"\n    )\n}\n'})}),"\n",(0,t.jsxs)(i.p,{children:["When executing an operation that includes the user field, the Tailcall GraphQL API fetches data from the REST API and returns it to the client. The ",(0,t.jsx)(i.code,{children:"@http"})," directive, applied to a type system location, annotates the user field and defines how data should be fetched."]}),"\n",(0,t.jsx)(i.h3,{id:"execution-directives",children:"Execution Directives"}),"\n",(0,t.jsx)(i.p,{children:"Execution directives modify the behavior of an operation, field, or fragment during runtime execution. They can include or exclude fields or perform additional data processing before returning a response."}),"\n",(0,t.jsx)(i.p,{children:"Executable directive locations in GraphQL include:"}),"\n",(0,t.jsxs)(i.ul,{children:["\n",(0,t.jsx)(i.li,{children:"QUERY"}),"\n",(0,t.jsx)(i.li,{children:"MUTATION"}),"\n",(0,t.jsx)(i.li,{children:"SUBSCRIPTION"}),"\n",(0,t.jsx)(i.li,{children:"FIELD"}),"\n",(0,t.jsx)(i.li,{children:"FRAGMENT_DEFINITION & FRAGMENT_SPREAD"}),"\n",(0,t.jsx)(i.li,{children:"INLINE_FRAGMENT"}),"\n",(0,t.jsx)(i.li,{children:"VARIABLE_DEFINITION"}),"\n"]}),"\n",(0,t.jsx)(i.p,{children:"Both built-in and custom directives can be applied to executable locations. Most built-in directives are executable, such as @skip and @include, used to conditionally include or exclude fields in an operation."}),"\n",(0,t.jsx)(i.h3,{id:"example-of-include-directive",children:"Example of @include Directive"}),"\n",(0,t.jsx)(i.p,{children:"The @include directive conditionally includes fields in a query operation:"}),"\n",(0,t.jsx)(i.pre,{children:(0,t.jsx)(i.code,{className:"language-graphql",children:"query me($showName: Boolean!) {\n  me {\n    id\n    firstName @include(if: $showName)\n    lastName @include(if: $showName)\n    email\n  }\n}\n"})}),"\n",(0,t.jsx)(i.p,{children:"The @include directive conditionally includes the firstName and lastName fields in the response. The if argument specifies a boolean value determining whether to include the field. The if argument is set to the variable $showName, allowing for conditional inclusion based on its value."}),"\n",(0,t.jsx)(i.h2,{id:"conclusion-and-next-steps",children:"Conclusion and Next Steps"}),"\n",(0,t.jsx)(i.p,{children:"GraphQL directives, though initially complex, are a powerful tool within the GraphQL ecosystem. This article explained built-in and custom directives and their application across type system and executable locations in GraphQL. Type system directives apply to GraphQL SDL, while executable directives modify GraphQL responses during runtime execution."}),"\n",(0,t.jsx)(i.p,{children:"Understanding directives is crucial when working with GraphQL APIs, whether using tools like Tailcall GraphQL server or manually implementing."})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,t.jsx)(i,{...e,children:(0,t.jsx)(o,{...e})}):o(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>l});var t=n(96540);const r={},s=t.createContext(r);function a(e){const i=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),t.createElement(s.Provider,{value:i},e.children)}}}]);