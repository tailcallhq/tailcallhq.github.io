"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4946],{2532:(e,s,t)=>{t.r(s),t.d(s,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>r,metadata:()=>a,toc:()=>c});var n=t(74848),i=t(28453);const r={title:"Customizing using Javascript",sidebar_label:"Custom Resolvers",description:"Discover how to effortlessly manipulate HTTP requests and responses using Tailcall's lightweight JS runtime. Tailcall provides a streamlined JavaScript environment specifically designed for simple yet powerful request/response modifications without the complexity of a full Node.js setup. Ideal for developers looking to implement middleware solutions, Tailcall's runtime does not require file system or network access, ensuring a secure and focused development process.",slug:"graphql-javascript-customization"},o=void 0,a={id:"scripting",title:"Customizing using Javascript",description:"Discover how to effortlessly manipulate HTTP requests and responses using Tailcall's lightweight JS runtime. Tailcall provides a streamlined JavaScript environment specifically designed for simple yet powerful request/response modifications without the complexity of a full Node.js setup. Ideal for developers looking to implement middleware solutions, Tailcall's runtime does not require file system or network access, ensuring a secure and focused development process.",source:"@site/docs/scripting.md",sourceDirName:".",slug:"/graphql-javascript-customization",permalink:"/docs/graphql-javascript-customization",draft:!1,unlisted:!1,editUrl:"https://github.com/tailcallhq/tailcallhq.github.io/tree/develop/docs/scripting.md",tags:[],version:"current",lastUpdatedAt:1718205286e3,frontMatter:{title:"Customizing using Javascript",sidebar_label:"Custom Resolvers",description:"Discover how to effortlessly manipulate HTTP requests and responses using Tailcall's lightweight JS runtime. Tailcall provides a streamlined JavaScript environment specifically designed for simple yet powerful request/response modifications without the complexity of a full Node.js setup. Ideal for developers looking to implement middleware solutions, Tailcall's runtime does not require file system or network access, ensuring a secure and focused development process.",slug:"graphql-javascript-customization"},sidebar:"docs",previous:{title:"GraphQL on gRPC",permalink:"/docs/graphql-grpc-tailcall"},next:{title:"HTTP/2",permalink:"/docs/graphql-http2-guide-tailcall"}},l={},c=[{value:"Getting Started",id:"getting-started",level:2},{value:"Modify Request",id:"modify-request",level:2},{value:"Create Response",id:"create-response",level:2},{value:"Response Redirect",id:"response-redirect",level:2},{value:"Schema",id:"schema",level:2},{value:"Request",id:"request",level:3},{value:"Response",id:"response",level:3}];function d(e){const s={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(s.p,{children:"Tailcall provides a light-weight JS runtime to modify requests and resolve with custom responses.\nThe runtime is not a full-fledged Node.js environment and has no access to the file system or the network. It is designed to be used for simple request/response modifications."}),"\n",(0,n.jsx)(s.h2,{id:"getting-started",children:"Getting Started"}),"\n",(0,n.jsxs)(s.p,{children:["To leverage this customization, JavaScript functions must be created in a JavaScript file and linked with the main configuration file using the ",(0,n.jsx)(s.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#link-directive",children:"@link"})," directive. There are two primary ways to achieve this:"]}),"\n",(0,n.jsxs)(s.ol,{children:["\n",(0,n.jsxs)(s.li,{children:["Define an ",(0,n.jsx)(s.code,{children:"onRequest"})," property with the JS function name in the ",(0,n.jsx)(s.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#onrequest",children:"http"})," directive."]}),"\n",(0,n.jsxs)(s.li,{children:["Define it in the ",(0,n.jsx)(s.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#onrequest-1",children:"upstream"})," directive, which acts as a global middleware for all requests."]}),"\n"]}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsxs)(s.p,{children:["If you specify a ",(0,n.jsx)(s.code,{children:"onRequest"})," handler for both ",(0,n.jsx)(s.code,{children:"http"})," and ",(0,n.jsx)(s.code,{children:"upstream"})," the ",(0,n.jsx)(s.code,{children:"http"})," one will always take precedence over the global ",(0,n.jsx)(s.code,{children:"onRequest"})," handler."]})}),"\n",(0,n.jsxs)(s.p,{children:["The function serves as middleware, allowing for the interception and modification of the request, as well as the production of artificial responses. Here is a simple example of a ",(0,n.jsx)(s.code,{children:"worker.js"})," file with a function named ",(0,n.jsx)(s.code,{children:"foo"}),", which takes a ",(0,n.jsx)(s.code,{children:"request"})," object as an argument, logs the request, and returns the original request without any modifications."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:"function foo({request}) {\n  console.log(`${request.method} ${request.uri.path}`)\n\n  return {request}\n}\n"})}),"\n",(0,n.jsxs)(s.p,{children:["Once you have a worker file ready, link that file to the GraphQL configuration using the ",(0,n.jsx)(s.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#link-directive",children:(0,n.jsx)(s.code,{children:"@link"})})," directive and define the ",(0,n.jsx)(s.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#onrequest-1",children:"onRequest"})," property."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-graphql",children:'schema\n  @link(type: Script, src: "./worker.js")\n  @upstream(onRequest: "foo") {\n  query: Query\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["Now, you can start the server using the usual ",(0,n.jsx)(s.a,{href:"/docs/tailcall-graphql-cli#start",children:"start"})," command. Requests made to the GraphQL server will now be intercepted by the worker and logged to the console."]}),"\n",(0,n.jsx)(s.h2,{id:"modify-request",children:"Modify Request"}),"\n",(0,n.jsxs)(s.p,{children:["You can modify the request by returning a ",(0,n.jsx)(s.code,{children:"request"})," object from the ",(0,n.jsx)(s.code,{children:"onRequest"})," function. Below is an example where we are modifying the request to add a custom header."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:'function onRequest({request}) {\n  request.headers["x-custom-header"] = "Hello, Tailcall!"\n\n  return {request}\n}\n'})}),"\n",(0,n.jsx)(s.h2,{id:"create-response",children:"Create Response"}),"\n",(0,n.jsxs)(s.p,{children:["You can respond with custom responses by returning a ",(0,n.jsx)(s.code,{children:"response"})," object from the ",(0,n.jsx)(s.code,{children:"onRequest"})," function. Below is an example where we are responding with a custom response for all requests that start with ",(0,n.jsx)(s.code,{children:"https://api.example.com"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:'function onRequest({request}) {\n  if (request.uri.path.startsWith("https://api.example.com")) {\n    return {\n      response: {\n        status: 200,\n        headers: {\n          "content-type": "application/json"\n        },\n        body: JSON.stringify({message: "Hello, Tailcall!"})\n      }\n    }\n  }\n  else {\n    return {request}\n  }\n'})}),"\n",(0,n.jsx)(s.h2,{id:"response-redirect",children:"Response Redirect"}),"\n",(0,n.jsxs)(s.p,{children:["Sometimes you might want to redirect the request to a different URL. You can do this by returning a ",(0,n.jsx)(s.code,{children:"response"})," object with a ",(0,n.jsx)(s.code,{children:"status"})," of ",(0,n.jsx)(s.code,{children:"301"})," or ",(0,n.jsx)(s.code,{children:"302"})," and a ",(0,n.jsx)(s.code,{children:"Location"})," header. The following example redirects all requests to ",(0,n.jsx)(s.code,{children:"https://example.com"})," to ",(0,n.jsx)(s.code,{children:"https://tailcall.com"}),"."]}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-javascript",children:'function onRequest({request}) {\n  if (request.uri.path.startsWith("https://example.com")) {\n    return {\n      response: {\n        status: 301,\n        headers: {\n          Location: "https://tailcall.com",\n        },\n      },\n    }\n  } else {\n    return {request}\n  }\n}\n'})}),"\n",(0,n.jsx)(s.admonition,{type:"important",children:(0,n.jsx)(s.p,{children:"The new request that's created as a result of the redirect will not be intercepted by the worker."})}),"\n",(0,n.jsx)(s.h2,{id:"schema",children:"Schema"}),"\n",(0,n.jsxs)(s.p,{children:["The ",(0,n.jsx)(s.code,{children:"onRequest"})," function takes a single argument that contains the request object. The return value of the ",(0,n.jsx)(s.code,{children:"onRequest"})," function can be a ",(0,n.jsx)(s.code,{children:"request"})," object, or a ",(0,n.jsx)(s.code,{children:"response"})," object. It can not be null or undefined."]}),"\n",(0,n.jsx)(s.h3,{id:"request",children:"Request"}),"\n",(0,n.jsx)(s.p,{children:"The request object has the following shape:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:'type Request = {\n  method: string\n  uri: {\n    path: string\n    query?: {[key: string]: string}\n    scheme: "Http" | "Https"\n    host?: string\n    port?: number\n  }\n  headers: {[key: string]: string}\n  body?: string\n}\n'})}),"\n",(0,n.jsxs)(s.p,{children:["By default the headers field will be empty in most cases, unless headers are whitelisted via the ",(0,n.jsx)(s.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#allowedheaders",children:"allowedHeaders"})," setting in ",(0,n.jsx)(s.a,{href:"/docs/tailcall-dsl-graphql-custom-directives#upstream-directive",children:(0,n.jsx)(s.code,{children:"@upstream"})}),"."]}),"\n",(0,n.jsx)(s.p,{children:"The http filter doesn't have access to the request's body, hence you can't directly modify the body of an outgoing request. This is more of a design choice than a limitation we have made to ensure that developers don't misuse this API to write all kind of business logic in Tailcall."}),"\n",(0,n.jsx)(s.admonition,{type:"tip",children:(0,n.jsx)(s.p,{children:"As an escape hatch you can pass the request body as a query param instead of an actual request body and read in the JS."})}),"\n",(0,n.jsxs)(s.p,{children:["The modified request that's returned from the above ",(0,n.jsx)(s.code,{children:"onRequest"})," function can optionally provide the body. This body is used by Tailcall as the request body while making the upstream request."]}),"\n",(0,n.jsx)(s.h3,{id:"response",children:"Response"}),"\n",(0,n.jsx)(s.p,{children:"The response object has the following shape:"}),"\n",(0,n.jsx)(s.pre,{children:(0,n.jsx)(s.code,{className:"language-typescript",children:"type Response = {\n  status: number\n  headers: {[key: string]: string}\n  body?: string\n}\n"})})]})}function h(e={}){const{wrapper:s}={...(0,i.R)(),...e.components};return s?(0,n.jsx)(s,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},28453:(e,s,t)=>{t.d(s,{R:()=>o,x:()=>a});var n=t(96540);const i={},r=n.createContext(i);function o(e){const s=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(s):{...s,...e}}),[s,e])}function a(e){let s;return s=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),n.createElement(r.Provider,{value:s},e.children)}}}]);